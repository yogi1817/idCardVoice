Remember to add ServletInitializer when convert a App Engine
gradle clean build

gcloud init
	and choose the right project.
gcloud config set project [project_id]
	this project_id is in google clound project.
	
make sure your appengine deploy has the correct project id from google cloud. 
gradle --stacktrace appengineDeploy

Kafka
	git clone https://github.com/wurstmeister/kafka-docker
	cd kafka-docker
		// Edit `docker-compose.yml`
		// 1. Change the docker host IP in `KAFKA_ADVERTISED_HOST_NAME`
		// e.g. KAFKA_ADVERTISED_HOST_NAME: docker.for.mac.localhost on macOS
		// See https://docs.docker.com/docker-for-mac/networking/
		// 2. Expose port `9092` of `kafka` service to the host
		// i.e. change it to `9092:9092`
		
		// Start services from `docker-compose.yml`
	docker-compose up
	nc -vz localhost 9092
	
running your spring boot app on https:
	The below approach does not work for google dialogflow webhook for some reason, alternate flow below.
1. Generate a JKS or PKCS12(preffered)
	keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -keystore keystore.jks -validity 3650
	keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore keystore.p12 -validity 3650
2. place that in resource folder and add details in application.yml
3. Redrect http to https by creating Connector Config
4. Distribute ssl to client

	Another was to run the https server is by insalling ngrok. - Tested and worked.
	For this comment the ConnectorConfig.java and comment ssl properties from application.yml
1. Download ngrok zip and extract. i have done that in my download folders.
2. add the authtoken, you can get the key by logging into ngrok website.
	./ngrok authtoken 1Qt4qZi6orBQJwWA3Hpw8vPODXg_5oeiJPRi2twU7sbULV8gL
3. run ngrok.
	./ngrok http 8080